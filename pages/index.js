import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";
import { SortDirection, Client, Conversation } from "@xmtp/xmtp-js";
import { useState, useContext, useEffect, useRef } from "react";
import { MainContext } from "../context";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import Link from "next/link";
import { useProvider, useSigner } from "wagmi";

import { useRouter } from "next/router";

export const buildConversationKey = (peerAddress, conversationId) =>
  `${peerAddress.toLowerCase()}/${conversationId}`;

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const context = useContext(MainContext);
  let [profiles, setProfiles] = useState();
  const provider = useProvider();
  const { data: signer } = useSigner();
  const router = useRouter();

  const { client, setClient, setCurrentConversation, profilesRef } = context;

  useEffect(() => {
    console.log(client);
    if (!Object.keys(profilesRef.current).length) {
      fetchMessages(client);
    } else {
      setProfiles(profilesRef.current);
    }
  }, [client]);

  async function initClient() {
    try {
      const xmtp = await Client.create(signer, {
        env: "production",
      });
      setClient(xmtp);
      console.log(xmtp);
    } catch (e) {
      console.error(e);
    }
  }

  async function fetchMostRecentMessage(convo) {
    const key = buildConversationKey(
      convo.peerAddress,
      convo.context?.conversationId
    );

    const newMessages = await convo.messages({
      limit: 1,
      direction: SortDirection.SORT_DIRECTION_DESCENDING,
    });
    if (newMessages.length <= 0) {
      return { key };
    }
    return { key, message: newMessages[0] };
  }

  async function fetchProfile(conversation) {
    const profileData = await apolloClient.query({
      query: getDefaultProfile,
      variables: {
        address: conversation.peerAddress,
      },
    });
    return profileData.data.defaultProfile;
  }

  async function fetchMessages(xmtp) {
    if (!xmtp) return;
    // setLoading(true);

    //get Conversations and filter all the lens convo
    const allConversations = await xmtp.conversations.list();
    let lensConversations = allConversations.filter((conversation) =>
      conversation.context?.conversationId.startsWith("lens.dev/dm/")
    );

    /// Fetch all the messages for the convo
    const previews = await Promise.all(
      lensConversations.map(fetchMostRecentMessage)
    );

    /// fetcht the Profiles of the convos
    let profiles = await Promise.all(lensConversations.map(fetchProfile));

    /// Adding the convo of the resp profile
    profiles = profiles.map((profile, i) => {
      return {
        ...profile,
        preview: previews[i],
      };
    });

    /// filtering the profile with a message
    profiles = profiles.filter((profile) => profile.preview.message);

    /// Reducing to only the needed data
    const profileObj = profiles.reduce((acc, next) => {
      acc[next.preview.message.conversation.topic] = next;
      return acc;
    }, {});

    /// set the Final Profiles
    profilesRef.current = profileObj;
    // setLoading(false);

    setProfiles(profilesRef.current);

    ///Starting the stream for convo
    previews.map((preview) => streamConvos(preview.message?.conversation));
  }

  async function streamConvos(convo) {
    if (!convo) return;
    for await (const message of await convo.streamMessages()) {
      profilesRef.current[message.conversation.topic].preview.message = message;
      setProfiles({ ...profilesRef.current });
    }
  }

  profiles = Object.values(profilesRef.current).reverse();

  return (
    <>
      <Head>
        <title>XMTP-Chat-App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>Get started by intiating the XMTP Client</p>
          <div>
            <a
              href="https://twitter.com/0xdhruva"
              target="_blank"
              rel="noopener noreferrer"
            >
              By @0xdhruva
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <h1>XMTP Chat</h1>
          <ConnectButton />
          {!client && (
            <div>
              <button onClick={() => initClient(provider)}>
                Join XMTP Client
              </button>
            </div>
          )}
          {Boolean(profiles.length) &&
            profiles.map((profile, index) => (
              <Link
                key={index}
                href={`./conversation/${profile.handle}`}
                onClick={() =>
                  setCurrentConversation(profile.preview.message.conversation)
                }
              >
                <div>
                  <p>From : {profile.handle}</p>
                  <p>{profile.preview.message.content}</p>
                </div>
              </Link>
            ))}
          <button
            onClick={() => {
              router.push("/create");
            }}
          >
            Create a new message
          </button>
        </div>
      </main>
    </>
  );
}
